{
  "version": 3,
  "sources": ["../lib/util.ts"],
  "sourcesContent": ["import { CookieAttrs, CookieObject, ServerCookieAttrs } from './types.js';\r\n\r\nconst validSameSite = ['Lax', 'None', 'Strict'];\r\n\r\n/** Instance check to see if a value is a certain class */\r\nconst isInstance = (Class: Function) => (value: any) => value instanceof Class;\r\n\r\n/** Type check to see if a value is a certain primative */\r\nconst isType = (type: string) => (value: any) => type === typeof value;\r\n\r\n/** Check for non-null and non-undefined */\r\nexport const exists = (value: any) => (value ?? null) !== null;\r\n\r\n/** Format cookie attribute objects into a cookie string */\r\nexport const formatCookies = (key: string, value: string | CookieAttrs) => {\r\n  let toSet = `${key}=`;\r\n  if ('string' === typeof value) return `${toSet}${value}`;\r\n  validate(value);\r\n  const { domain, expires, maxAge, path, samesite, secure, value: val } = value;\r\n  toSet += val;\r\n  if (exists(domain)) toSet += `;domain=${domain}`;\r\n  if (exists(expires)) {\r\n    const now = new Date();\r\n    const expire = new Date(now.setDate(now.getDate() + 400)).toUTCString();\r\n    toSet += `;expires=${expire}`;\r\n  }\r\n  if (exists((<ServerCookieAttrs>value).httpOnly)) toSet += `;http-only=${(<ServerCookieAttrs>value).httpOnly}`;\r\n  if (exists(maxAge)) {\r\n    // limit 400 days\r\n    const max = Math.max(maxAge, 1707109200);\r\n    toSet += `;max-age=${max}`;\r\n  }\r\n  if (exists(path)) toSet += `;path=${path}`;\r\n  if (exists(samesite)) toSet += `;samesite=${samesite}`;\r\n  if (exists(secure)) toSet += `;secure=${secure}`;\r\n  return toSet;\r\n};\r\n\r\n/** Type check if value is a boolean */\r\nexport const isBoolean = isType('boolean');\r\n\r\n/** Check if the current global scope is a browser by checking for `globalThis.document` */\r\nexport const isClient = () => !!globalThis.document;\r\n\r\n/** Instance check if value is a Date object */\r\nexport const isDate = isInstance(Date);\r\n\r\n/** Instance check if value is an Error object */\r\nexport const isError = isInstance(Error);\r\n\r\n/** Type check if value is number */\r\nexport const isNumber = isType('number');\r\n\r\n/** Type check if value is string */\r\nexport const isString = isType('string');\r\n\r\n/** FP friendly way to generate errors */\r\nexport const toss = (toThrow: string) => {\r\n  throw isError(toThrow) ? toThrow : new Error(toThrow);\r\n};\r\n\r\n/** Convert cookie string value into an object */\r\nexport const makeCookieObject = (cookieStr: string): CookieObject =>\r\n  Object.fromEntries(cookieStr.split('; ').map(cookie => cookie.split('=')));\r\n\r\n// TODO: check if other attributes need validation like `samesite` below\r\n/** Validate cookie attributes */\r\nexport const validate = (attrs: CookieAttrs) => {\r\n  const { domain, expires, maxAge, path, samesite, secure, value } = attrs;\r\n  if (exists(domain) && !isString(domain)) toss('domain must be a string');\r\n  if (exists(expires) && !isString(expires) && !isDate(expires))\r\n    toss('expires must be a UTC timestring or Date object');\r\n  if (exists((attrs as ServerCookieAttrs).httpOnly) && !isBoolean((attrs as ServerCookieAttrs).httpOnly))\r\n    toss('httpOnly must be a boolean');\r\n  if (exists(maxAge) && !isNumber(maxAge)) toss('maxAge must be a number');\r\n  if (exists(path) && !isString(path)) toss('path must be a string');\r\n  if (exists(samesite) && !isString(samesite)) toss('samesite must be a string');\r\n  if (!validSameSite.includes(samesite)) toss('samesite must be one of Lax, None, or Strict');\r\n  if (exists(secure) && !isBoolean(secure)) toss('secure must be a boolean');\r\n  if (!isString(value)) toss('value must be a string');\r\n};\r\n"],
  "mappings": "AAEA,MAAM,gBAAgB,CAAC,OAAO,QAAQ,QAAQ;AAG9C,MAAM,aAAa,CAAC,UAAoB,CAAC,UAAe,iBAAiB;AAGzE,MAAM,SAAS,CAAC,SAAiB,CAAC,UAAe,SAAS,OAAO;AAG1D,MAAM,SAAS,CAAC,WAAgB,SAAS,UAAU;AAGnD,MAAM,gBAAgB,CAAC,KAAa,UAAgC;AACzE,MAAI,QAAQ,GAAG;AACf,MAAI,aAAa,OAAO;AAAO,WAAO,GAAG,QAAQ;AACjD,WAAS,KAAK;AACd,QAAM,EAAE,QAAQ,SAAS,QAAQ,MAAM,UAAU,QAAQ,OAAO,IAAI,IAAI;AACxE,WAAS;AACT,MAAI,OAAO,MAAM;AAAG,aAAS,WAAW;AACxC,MAAI,OAAO,OAAO,GAAG;AACnB,UAAM,MAAM,oBAAI,KAAK;AACrB,UAAM,SAAS,IAAI,KAAK,IAAI,QAAQ,IAAI,QAAQ,IAAI,GAAG,CAAC,EAAE,YAAY;AACtE,aAAS,YAAY;AAAA,EACvB;AACA,MAAI,OAA2B,MAAO,QAAQ;AAAG,aAAS,cAAkC,MAAO;AACnG,MAAI,OAAO,MAAM,GAAG;AAElB,UAAM,MAAM,KAAK,IAAI,QAAQ,UAAU;AACvC,aAAS,YAAY;AAAA,EACvB;AACA,MAAI,OAAO,IAAI;AAAG,aAAS,SAAS;AACpC,MAAI,OAAO,QAAQ;AAAG,aAAS,aAAa;AAC5C,MAAI,OAAO,MAAM;AAAG,aAAS,WAAW;AACxC,SAAO;AACT;AAGO,MAAM,YAAY,OAAO,SAAS;AAGlC,MAAM,WAAW,MAAM,CAAC,CAAC,WAAW;AAGpC,MAAM,SAAS,WAAW,IAAI;AAG9B,MAAM,UAAU,WAAW,KAAK;AAGhC,MAAM,WAAW,OAAO,QAAQ;AAGhC,MAAM,WAAW,OAAO,QAAQ;AAGhC,MAAM,OAAO,CAAC,YAAoB;AACvC,QAAM,QAAQ,OAAO,IAAI,UAAU,IAAI,MAAM,OAAO;AACtD;AAGO,MAAM,mBAAmB,CAAC,cAC/B,OAAO,YAAY,UAAU,MAAM,IAAI,EAAE,IAAI,YAAU,OAAO,MAAM,GAAG,CAAC,CAAC;AAIpE,MAAM,WAAW,CAAC,UAAuB;AAC9C,QAAM,EAAE,QAAQ,SAAS,QAAQ,MAAM,UAAU,QAAQ,MAAM,IAAI;AACnE,MAAI,OAAO,MAAM,KAAK,CAAC,SAAS,MAAM;AAAG,SAAK,yBAAyB;AACvE,MAAI,OAAO,OAAO,KAAK,CAAC,SAAS,OAAO,KAAK,CAAC,OAAO,OAAO;AAC1D,SAAK,iDAAiD;AACxD,MAAI,OAAQ,MAA4B,QAAQ,KAAK,CAAC,UAAW,MAA4B,QAAQ;AACnG,SAAK,4BAA4B;AACnC,MAAI,OAAO,MAAM,KAAK,CAAC,SAAS,MAAM;AAAG,SAAK,yBAAyB;AACvE,MAAI,OAAO,IAAI,KAAK,CAAC,SAAS,IAAI;AAAG,SAAK,uBAAuB;AACjE,MAAI,OAAO,QAAQ,KAAK,CAAC,SAAS,QAAQ;AAAG,SAAK,2BAA2B;AAC7E,MAAI,CAAC,cAAc,SAAS,QAAQ;AAAG,SAAK,8CAA8C;AAC1F,MAAI,OAAO,MAAM,KAAK,CAAC,UAAU,MAAM;AAAG,SAAK,0BAA0B;AACzE,MAAI,CAAC,SAAS,KAAK;AAAG,SAAK,wBAAwB;AACrD;",
  "names": []
}
