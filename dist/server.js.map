{
  "version": 3,
  "sources": ["../lib/server.ts"],
  "sourcesContent": ["import { type RequestHandler } from 'express';\r\nimport type { ClientRequest, IncomingMessage } from 'node:http';\r\nimport type { BakedServer, BiscottiRequest, BiscottiResponse, CookieObject, ServerCookieAttrs } from './types.js';\r\nimport { formatCookies, isClient, makeCookieObject, toss } from './util.js';\r\n\r\nconst invalid =\r\n  \"This is the server version of biscotti. Did you mean to import { bake } from '@studiokeywi/biscotti/client' or `import { bakeClient } from '@studiokeywi/biscotti'`?\";\r\n\r\nfunction add(res: BiscottiResponse, key: string, value: ServerCookieAttrs | string): BiscottiResponse {\r\n  return res.setHeader('Set-Cookie', formatCookies(key, value));\r\n}\r\n\r\nfunction get(req: BiscottiRequest): CookieObject;\r\nfunction get(req: BiscottiRequest, key: string): string;\r\nfunction get(req: BiscottiRequest, key?: string): CookieObject | string {\r\n  const cookieSource = ((<ClientRequest>req)?.getHeader?.('cookie') ??\r\n    (<IncomingMessage>req).headers?.cookie ??\r\n    (<IncomingMessage>req).headers?.Cookie ??\r\n    '') as string;\r\n  const cookies = makeCookieObject(cookieSource);\r\n  return key ? cookies[key] ?? '' : cookies;\r\n}\r\n\r\nfunction rem(res: BiscottiResponse, key: string) {\r\n  return add(res, key, { expires: new Date(), value: '' });\r\n}\r\n\r\n/** Create a new Server version of Biscotti */\r\nexport const bake = (req: BiscottiRequest, res: BiscottiResponse): BakedServer => {\r\n  if (isClient()) return toss(invalid);\r\n  return { add: add.bind(null, res), get: get.bind(null, req), mode: 'server', rem: rem.bind(null, res) };\r\n};\r\n\r\n/** Create a test middleware that performs a simple toggle of adding and removing a cookie */\r\nexport const testXPS =\r\n  (testCookieName: string): RequestHandler =>\r\n  (req, res) => {\r\n    const { biscotti } = res.locals as { biscotti: BakedServer };\r\n    if (biscotti.get(testCookieName)) return biscotti.rem(testCookieName).end(`Removed cookie ${testCookieName}`);\r\n    biscotti.add(testCookieName, 'test value').end(`Added cookie ${testCookieName}`);\r\n  };\r\n\r\n/** Prebuilt `express`-style middleware that adds a Server version of Biscotti to `res.locals.biscotti` */\r\nexport const xps: RequestHandler = (req, res, next) => {\r\n  res.locals ??= {};\r\n  res.locals.biscotti ??= bake(req, res);\r\n  next();\r\n};\r\n"],
  "mappings": "AAGA,SAAS,eAAe,UAAU,kBAAkB,YAAY;AAEhE,MAAM,UACJ;AAEF,SAAS,IAAI,KAAuB,KAAa,OAAqD;AACpG,SAAO,IAAI,UAAU,cAAc,cAAc,KAAK,KAAK,CAAC;AAC9D;AAIA,SAAS,IAAI,KAAsB,KAAqC;AACtE,QAAM,eAAgC,KAAM,YAAY,QAAQ,KAC5C,IAAK,SAAS,UACd,IAAK,SAAS,UAChC;AACF,QAAM,UAAU,iBAAiB,YAAY;AAC7C,SAAO,MAAM,QAAQ,GAAG,KAAK,KAAK;AACpC;AAEA,SAAS,IAAI,KAAuB,KAAa;AAC/C,SAAO,IAAI,KAAK,KAAK,EAAE,SAAS,oBAAI,KAAK,GAAG,OAAO,GAAG,CAAC;AACzD;AAGO,MAAM,OAAO,CAAC,KAAsB,QAAuC;AAChF,MAAI,SAAS;AAAG,WAAO,KAAK,OAAO;AACnC,SAAO,EAAE,KAAK,IAAI,KAAK,MAAM,GAAG,GAAG,KAAK,IAAI,KAAK,MAAM,GAAG,GAAG,MAAM,UAAU,KAAK,IAAI,KAAK,MAAM,GAAG,EAAE;AACxG;AAGO,MAAM,UACX,CAAC,mBACD,CAAC,KAAK,QAAQ;AACZ,QAAM,EAAE,SAAS,IAAI,IAAI;AACzB,MAAI,SAAS,IAAI,cAAc;AAAG,WAAO,SAAS,IAAI,cAAc,EAAE,IAAI,kBAAkB,gBAAgB;AAC5G,WAAS,IAAI,gBAAgB,YAAY,EAAE,IAAI,gBAAgB,gBAAgB;AACjF;AAGK,MAAM,MAAsB,CAAC,KAAK,KAAK,SAAS;AA3CvD;AA4CE,MAAI,WAAJ,IAAI,SAAW,CAAC;AAChB,YAAI,QAAO,aAAX,GAAW,WAAa,KAAK,KAAK,GAAG;AACrC,OAAK;AACP;",
  "names": []
}
